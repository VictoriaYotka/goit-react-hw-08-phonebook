{"version":3,"file":"static/js/993.d4f48b98.chunk.js","mappings":"+OAOO,SAASA,IACd,IAAMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAWC,EAAAA,EAAAA,MAqBjB,OACE,+BACE,kBAAMC,SArBW,SAACC,GACpB,IAAMC,EAAOD,EAAEE,cACfF,EAAEG,iBACA,IAAMC,EAAUH,EAAKI,SAASC,KAAKC,MAC7BC,EAAWP,EAAKI,SAASI,MAAMF,MAEpCb,EAASgB,MAAK,qBAAEJ,OAAmBF,CAArB,IACbO,EAAAA,GAAAA,KAAA,UAAcP,EAAd,4BACIP,GAASe,EAAAA,EAAAA,IAAW,CAACN,KAAMF,EACjCS,OAAQL,KAAYM,SACnBC,MAAK,kBACNJ,EAAAA,GAAAA,QAAA,UAAiBP,EAAjB,wBADM,IAELY,OAAM,kBACLL,EAAAA,GAAAA,MAAA,gCAAqCP,EAArC,0BADK,IAITH,EAAKgB,OACN,EAIG,WACE,kBAAOC,QAAQ,OAAf,mBACA,kBACEC,KAAK,OACLb,KAAK,OACLc,GAAG,OACHC,QAAQ,aACRC,MAAM,yIACNC,UAAQ,KAGV,kBAAOL,QAAQ,QAAf,oBACA,kBACEC,KAAK,MACLb,KAAK,QACLc,GAAG,QACHC,QAAQ,SACRC,MAAM,+FACNC,UAAQ,KAGV,mBAAQJ,KAAK,SAAb,6BAIP,C,cCnDM,SAASK,IACZ,IAAM3B,GAAWC,EAAAA,EAAAA,MACX2B,GAAmB9B,EAAAA,EAAAA,IAAY+B,EAAAA,IAC/BC,GAAYhC,EAAAA,EAAAA,IAAYiC,EAAAA,IACxBC,GAAQlC,EAAAA,EAAAA,IAAYmC,EAAAA,KAE1BC,EAAAA,EAAAA,YAAU,WACRlC,GAASmC,EAAAA,EAAAA,MACV,GAAE,CAACnC,IASJ,OACA,gCACK8B,IAAc,sCACdE,IAAS,uBAAIA,IACbJ,EAAiBQ,OAAS,GAEvB,wBACCR,EAAiBS,KAAI,gBAAEd,EAAF,EAAEA,GAAId,EAAN,EAAMA,KAAMO,EAAZ,EAAYA,OAAZ,OAAwB,0BAAcP,EAAd,KAAsBO,GACpE,mBAAQsB,QAAS,kBAdE,SAACf,EAAId,GAC5BT,GAASuC,EAAAA,EAAAA,IAAchB,IAAKN,SAC3BC,MAAK,kBAAMJ,EAAAA,GAAAA,QAAA,UAAiBL,EAAjB,0BAAN,IACLU,OAAM,kBAAML,EAAAA,GAAAA,MAAA,gCAAqCL,EAArC,2BAAN,GACV,CAU8B+B,CAAmBjB,EAAId,EAA7B,EAAjB,sBADuDc,EAAjC,OAIxB,yDAGJ,C,cClCC,SAASkB,IACZ,IAAMzC,GAAWC,EAAAA,EAAAA,MAMjB,OACI,iCACA,kBAAOoB,QAAQ,SAAf,qCACA,kBACAC,KAAK,OACLb,KAAK,SACLc,GAAG,SACHmB,SAXiB,SAACvC,GAClB,IAAOO,EAASP,EAAEwC,OAAXjC,MACPV,GAAS4C,EAAAA,EAAAA,GAAelC,GAC3B,MAYJ,CCfD,IAcA,EAdiB,WACb,IAAMkB,GAAmB9B,EAAAA,EAAAA,IAAY+B,EAAAA,IACvC,OACE,iCAEI,SAACjC,EAAD,KAEA,uCAAegC,EAAiBQ,OAAhC,QACA,SAACK,EAAD,KACA,SAACd,EAAD,MAGP,C","sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { toast } from \"react-toastify\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/fetchContacts';\nimport {selectContacts } from 'redux/selectors';\n\n\nexport function ContactForm() {\n  const contacts = useSelector(selectContacts)\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e) => {\n    const form = e.currentTarget;\n    e.preventDefault();\n      const newName = form.elements.name.value;\n      const newPhone = form.elements.phone.value; \n\n    if(contacts.find(({name}) => name === newName)) {\n        toast.info(`${newName} is already in contacts`);\n    } else {dispatch(addContact({name: newName,\n      number: newPhone})).unwrap()\n      .then(() => \n      toast.success(`${newName} successfully added!`))\n      .catch(() => \n        toast.error(`Something went wrong, ${newName} not added. Try again `))     \n    }\n\n    form.reset()\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          pattern=\"[a-zA-Z ]*\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <label htmlFor=\"phone\">Phone</label>\n        <input\n          type=\"tel\"\n          name=\"phone\"\n          id=\"phone\"\n          pattern=\"[0-9]+\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </>\n    )\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { deleteContact, fetchContacts } from 'redux/fetchContacts';\nimport { selectError, selectFilteredContacts, selectIsLoading,  } from 'redux/selectors';\n\nexport function ContactList() {\n    const dispatch = useDispatch();\n    const filteredContacts = useSelector(selectFilteredContacts);\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\n    useEffect(() => {\n      dispatch(fetchContacts())    \n    }, [dispatch])\n    \n\n    const handleDeleteButton = (id, name) => {\n        dispatch(deleteContact(id)).unwrap()\n        .then(() => toast.success(`${name} successfully deleted!`) )\n        .catch(() => toast.error(`Something went wrong, ${name} not deleted. Try again`))\n    }\n\n    return (\n    <>\n        {isLoading  && <p>Loading...</p>}\n        {error && <p>{error}</p>}\n        {filteredContacts.length > 0 \n        ?\n            <ul>\n            {filteredContacts.map(({id, name, number}) => <li key={id}>{name}: {number}\n            <button onClick={() => handleDeleteButton(id, name)}>Delete</button>\n            </li>)}\n        </ul>\n        : <p>You don't have contacts yet</p>\n        }  \n    </> \n    )}\n","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filtersSlice';\n\nexport function Filter() {\n    const dispatch = useDispatch();\n\n    const handleChange = (e) => {\n        const {value} = e.target;\n        dispatch(filterContacts(value))\n    }\n    return (\n        <>\n        <label htmlFor=\"filter\">Find contacts by name:</label>\n        <input \n        type=\"text\"\n        name=\"filter\"\n        id=\"filter\"\n        onChange={handleChange}\n        />\n  </>\n    )\n}","import { ContactForm } from 'components/ContactForm/ContactForm'\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectFilteredContacts } from 'redux/selectors';\nimport { useSelector } from 'react-redux';\n\nconst Contacts = () => {\n    const filteredContacts = useSelector(selectFilteredContacts);\n  return (\n    <>\n        \n        <ContactForm/>\n\n        <h2>Contacts ({filteredContacts.length})</h2>\n        <Filter/>\n        <ContactList />\n      </>\n  )\n}\n\nexport default Contacts"],"names":["ContactForm","contacts","useSelector","selectContacts","dispatch","useDispatch","onSubmit","e","form","currentTarget","preventDefault","newName","elements","name","value","newPhone","phone","find","toast","addContact","number","unwrap","then","catch","reset","htmlFor","type","id","pattern","title","required","ContactList","filteredContacts","selectFilteredContacts","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","length","map","onClick","deleteContact","handleDeleteButton","Filter","onChange","target","filterContacts"],"sourceRoot":""}